# 定义high fish consumption
A <- as.numeric(nhanes.fish$fish.level == "high")
# 定义协变量矩阵
X <- nhanes.fish[, c("gender", "age", "income", "income.missing", "race", "education", "smoking.ever", "smoking.now")]
X$race <- factor(X$race)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- log2(nhanes.fish$o.LBXTHG)
record <- replicate(2,matrix(0,nrow=ntrial,ncol=3), simplify=FALSE)
# 创建文件路径
folder<- paste0(path, 'alpha_',alpha,'/','gmm_',gmm_star, '/')
dir.create(folder, recursive=TRUE, showWarnings = FALSE)
n<- length(Y_all)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
print(paste0("alpha is ",alpha))
# 训练集数据的划分
Y_obs <- Y_all[trainid]
X <- X1[trainid,]
T_obs <- A[trainid]
Y1 <- Y_obs
Y1[which(T_obs==0)] <- NA
Y0 <- Y_obs
Y0[which(T_obs==1)] <- NA
id <- seq(1, n)
testid<- id[!(id %in% trainid)]
Xtest <- X1[testid,]
# 生成预测区间
obj_mean <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "mean",quantiles=list(), outfun='RF')
obj_cqr <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "CQR",quantiles=q, outfun='quantRF')
obj_bands_mean <- predict.nested(obj_mean, X, Y_obs, T_obs, alpha = alpha)
obj_bands_cqr <- predict.nested(obj_cqr, X, Y_obs, T_obs, alpha = alpha)
ci_mean <- fit_and_predict_band(obj_bands_mean, Xtest,'RF')
ci_cqr <- fit_and_predict_band(obj_bands_cqr, Xtest,'RF')
ci_list <- list(ci_mean,ci_cqr)
print_list <- list("ci_mean", "ci_cqr")
data <- cbind(ci_mean, ci_cqr)
colnames(data) <- c("mean_low", "mean_high", "cqr_low", "cqr_high")
df <- as.data.frame(t(data))
write.csv(data, file=paste0(folder, 'ntrial_', iter, '.csv'))
folder
#########设置###########
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 3, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--path", type = "character", default = './data/', help = "save location")
args <- parser$parse_args()
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save <- args$save
path = args$path
q<- c(alpha/2, 1- (alpha/2))
#######数据处理#########
load('./data/fish.Rda')
# 定义high fish consumption
A <- as.numeric(nhanes.fish$fish.level == "high")
# 定义协变量矩阵
X <- nhanes.fish[, c("gender", "age", "income", "income.missing", "race", "education", "smoking.ever", "smoking.now")]
X$race <- factor(X$race)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- log2(nhanes.fish$o.LBXTHG)
record <- replicate(2,matrix(0,nrow=ntrial,ncol=3), simplify=FALSE)
# 创建文件路径
folder<- paste0(path, 'alpha_',alpha,'/','gmm_',gmm_star, '/')
dir.create(folder, recursive=TRUE, showWarnings = FALSE)
##########训练测试##########
for (iter in 1:ntrial){
n<- length(Y_all)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
print(paste0("alpha is ",alpha))
# 训练集数据的划分
Y_obs <- Y_all[trainid]
X <- X1[trainid,]
T_obs <- A[trainid]
Y1 <- Y_obs
Y1[which(T_obs==0)] <- NA
Y0 <- Y_obs
Y0[which(T_obs==1)] <- NA
id <- seq(1, n)
testid<- id[!(id %in% trainid)]
Xtest <- X1[testid,]
# 生成预测区间
obj_mean <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "mean",quantiles=list(), outfun='RF')
obj_cqr <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "CQR",quantiles=q, outfun='quantRF')
obj_bands_mean <- predict.nested(obj_mean, X, Y_obs, T_obs, alpha = alpha)
obj_bands_cqr <- predict.nested(obj_cqr, X, Y_obs, T_obs, alpha = alpha)
ci_mean <- fit_and_predict_band(obj_bands_mean, Xtest,'RF')
ci_cqr <- fit_and_predict_band(obj_bands_cqr, Xtest,'RF')
ci_list <- list(ci_mean,ci_cqr)
print_list <- list("ci_mean", "ci_cqr")
data <- cbind(ci_mean, ci_cqr)
colnames(data) <- c("mean_low", "mean_high", "cqr_low", "cqr_high")
df <- as.data.frame(t(data))
write.csv(data, file=paste0(folder, 'ntrial_', iter, '.csv'))
for(i in 1:length(ci_list)){
ci <- ci_list[[i]]
# 负效应和正效应的比例
negative <- sum(ci[, 2] <=0)
positive <- sum(ci[, 1] >=0)
neg_percentage <- negative/dim(ci)[1]
pos_percentage <- positive/dim(ci)[1]
# 差异
diff <- ci[, 2] - ci[, 1]
# 区间长度
len <-mean(diff[is.finite(diff)])
print(print_list[i])
print(paste0( 'neg_percentage: ', neg_percentage,
' pos_percentage: ', pos_percentage, "  len: ", len))
print("###############")
record[[i]][iter,] <- c(neg_percentage,pos_percentage,len)
}
}
data
ci_mean
ci_cqr
#########设置###########
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 3, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--path", type = "character", default = './data/', help = "save location")
args <- parser$parse_args()
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save <- args$save
path = args$path
q<- c(alpha/2, 1- (alpha/2))
#######数据处理#########
load('./data/fish.Rda')
# 定义high fish consumption
A <- as.numeric(nhanes.fish$fish.level == "high")
# 定义协变量矩阵
X <- nhanes.fish[, c("gender", "age", "income", "income.missing", "race", "education", "smoking.ever", "smoking.now")]
X$race <- factor(X$race)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- log2(nhanes.fish$o.LBXTHG)
record <- replicate(2,matrix(0,nrow=ntrial,ncol=3), simplify=FALSE)
# 创建文件路径
folder<- paste0(path, 'alpha_',alpha,'/','gmm_',gmm_star, '/')
dir.create(folder, recursive=TRUE, showWarnings = FALSE)
##########训练测试##########
for (iter in 1:ntrial){
n<- length(Y_all)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
print(paste0("alpha is ",alpha))
# 训练集数据的划分
Y_obs <- Y_all[trainid]
X <- X1[trainid,]
T_obs <- A[trainid]
Y1 <- Y_obs
Y1[which(T_obs==0)] <- NA
Y0 <- Y_obs
Y0[which(T_obs==1)] <- NA
id <- seq(1, n)
testid<- id[!(id %in% trainid)]
Xtest <- X1[testid,]
# 生成预测区间
obj_mean <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "mean",quantiles=list(), outfun='RF')
obj_cqr <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "CQR",quantiles=q, outfun='quantRF')
obj_bands_mean <- predict.nested(obj_mean, X, Y_obs, T_obs, alpha = alpha)
obj_bands_cqr <- predict.nested(obj_cqr, X, Y_obs, T_obs, alpha = alpha)
ci_mean <- fit_and_predict_band(obj_bands_mean, Xtest,'RF')
ci_cqr <- fit_and_predict_band(obj_bands_cqr, Xtest,'RF')
ci_list <- list(ci_mean,ci_cqr)
print_list <- list("ci_mean", "ci_cqr")
data <- cbind(ci_mean, ci_cqr)
colnames(data) <- c("mean_low", "mean_high", "mean_y1_mean","mean_y0_mean","cqr_low", "cqr_high"
,"cqr_y1_mean","cqr_y0_mean")
df <- as.data.frame(t(data))
write.csv(data, file=paste0(folder, 'ntrial_', iter, '.csv'))
for(i in 1:length(ci_list)){
ci <- ci_list[[i]]
# 负效应和正效应的比例
negative <- sum(ci[, 2] <=0)
positive <- sum(ci[, 1] >=0)
neg_percentage <- negative/dim(ci)[1]
pos_percentage <- positive/dim(ci)[1]
# 差异
diff <- ci[, 2] - ci[, 1]
# 区间长度
len <-mean(diff[is.finite(diff)])
print(print_list[i])
print(paste0( 'neg_percentage: ', neg_percentage,
' pos_percentage: ', pos_percentage, "  len: ", len))
print("###############")
record[[i]][iter,] <- c(neg_percentage,pos_percentage,len)
}
}
ci_cqr
Aall <- as.numeric(nhanes.fish$fish.level == "high")
Xall <- nhanes.fish[, c("gender", "age", "income", "income.missing",
"race", "education", "smoking.ever", "smoking.now")]
Xall$race <- factor(Xall$race)
X1 <- model.matrix(~ . - 1, Xall)
Yall <- log2(nhanes.fish$o.LBXTHG)
psfun <- Boosting
n<- length(Yall)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
X <- X1[trainid,]
Y <- Yall[trainid]
A <- Aall[trainid]
Xtest <- X1[-trainid,]
Aall
psfun <- Boosting
n<- length(Yall)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
X <- X1[trainid,]
Y <- Yall[trainid]
A <- Aall[trainid]
Xtest <- X1[-trainid,]
ps <- do.call(psfun, list(Xtest = Xtest, Y = A , X = X))
ps
ps <- do.call(psfun, list(Xtest = Xtest, Y = A , X = X))
record <- c()
for(j in 1:dim(X)[2]){
ps_j <- do.call(psfun, list(Xtest = Xtest[,-c(j)], Y = A , X = X[,-c(j)]))
odds_j <- (ps/(1-ps))/(ps_j/(1-ps_j))
record <- c(record,odds_j)
}
idx <- which(record>=1)
R <- record
R[idx] <- record[idx]
R[-idx] <- 1/record[-idx]
quantile(R, seq(0, 1, by=.05))
summary(R)
boxplot(R)
pdf("./calib.pdf",width=5.5,height=6)
hist(R, breaks = 10, prob=TRUE, xlab='(Adjusted) odds ratio',main=NULL,
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
dens <- density(R, from=1, width=1.5)
lines(dens)
par(mar = c(4, 4, 0.1, 0.1))
dev.off()
idx <- which(record>=1)
R <- record
R[idx] <- record[idx]
R[-idx] <- 1/record[-idx]
idx
idx
R
R
quantile(R, seq(0, 1, by=.05))
summary(R)
boxplot(R)
pdf("./calib.pdf",width=5.5,height=6)
hist(R, breaks = 10, prob=TRUE, xlab='(Adjusted) odds ratio',main=NULL,
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
dens <- density(R, from=1, width=1.5)
lines(dens)
par(mar = c(4, 4, 0.1, 0.1))
dev.off()
hist(R)
hist(R, breaks = 10, prob=TRUE, xlab='(Adjusted) odds ratio',main=NULL,
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(dens)
dens <- density(R, from=1, width=1.5)
lines(dens)
boxplot(R)
pdf("./calib.pdf",width=5.5,height=6)
boxplot(R)
hist(R, breaks = 10, prob=TRUE, xlab='(Adjusted) odds ratio',main=NULL,
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
dens <- density(R, from=1, width=1.5)
lines(dens)
dev.off()
#######数据处理#########
load('./data/fish.Rda')
# 定义high fish consumption
A <- as.numeric(nhanes.fish$fish.level == "high")
#########设置###########
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 3, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--path", type = "character", default = './data/', help = "save location")
args <- parser$parse_args()
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save <- args$save
path = args$path
q<- c(alpha/2, 1- (alpha/2))
#######数据处理#########
load('./data/fish.Rda')
# 定义high fish consumption
A <- as.numeric(nhanes.fish$fish.level == "high")
# 定义协变量矩阵
X <- nhanes.fish[, c("gender", "age", "income", "income.missing", "race", "education", "smoking.ever", "smoking.now")]
X$race <- factor(X$race)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- log2(nhanes.fish$o.LBXTHG)
record <- replicate(2,matrix(0,nrow=ntrial,ncol=3), simplify=FALSE)
# 创建文件路径
folder<- paste0(path, 'alpha_',alpha,'/','gmm_',gmm_star, '/')
dir.create(folder, recursive=TRUE, showWarnings = FALSE)
path
alpha
##########训练测试##########
for (iter in 1:ntrial){
n<- length(Y_all)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
print(paste0("alpha is ",alpha))
# 训练集数据的划分
Y_obs <- Y_all[trainid]
X <- X1[trainid,]
T_obs <- A[trainid]
Y1 <- Y_obs
Y1[which(T_obs==0)] <- NA
Y0 <- Y_obs
Y0[which(T_obs==1)] <- NA
id <- seq(1, n)
testid<- id[!(id %in% trainid)]
Xtest <- X1[testid,]
# 生成预测区间
obj_mean <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "mean",quantiles=list(), outfun='RF')
obj_cqr <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "CQR",quantiles=q, outfun='quantRF')
obj_bands_mean <- predict.nested(obj_mean, X, Y_obs, T_obs, alpha = alpha)
obj_bands_cqr <- predict.nested(obj_cqr, X, Y_obs, T_obs, alpha = alpha)
ci_mean <- fit_and_predict_band(obj_bands_mean, Xtest,'RF')
ci_cqr <- fit_and_predict_band(obj_bands_cqr, Xtest,'RF')
ci_list <- list(ci_mean,ci_cqr)
print_list <- list("ci_mean", "ci_cqr")
data <- cbind(ci_mean, ci_cqr)
colnames(data) <- c("mean_low", "mean_high", "mean_y1_mean","mean_y0_mean","cqr_low", "cqr_high"
,"cqr_y1_mean","cqr_y0_mean")
df <- as.data.frame(t(data))
write.csv(data, file=paste0(folder, 'ntrial_', iter, '.csv'))
for(i in 1:length(ci_list)){
ci <- ci_list[[i]]
# 负效应和正效应的比例
negative <- sum(ci[, 2] <=0)
positive <- sum(ci[, 1] >=0)
neg_percentage <- negative/dim(ci)[1]
pos_percentage <- positive/dim(ci)[1]
# 差异
diff <- ci[, 2] - ci[, 1]
# 区间长度
len <-mean(diff[is.finite(diff)])
print(print_list[i])
print(paste0( 'neg_percentage: ', neg_percentage,
' pos_percentage: ', pos_percentage, "  len: ", len))
print("###############")
record[[i]][iter,] <- c(neg_percentage,pos_percentage,len)
}
}
rm(list = ls())
library("devtools")
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--n", type = "integer", default = 1000, help = "Sample size")
parser$add_argument("--d", type = "integer", default = 10, help = "Dimension")
parser$add_argument("--U", type = "double", default = 5, help = "bound of tilting function, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--cftype", type = "integer", default = 2, help = 'confounding type')
parser$add_argument("--ntrial", type = "integer", default = 3, help = "number of trials")
parser$add_argument("--path", type = "character", default = 'exp1/out/', help = "verbose or not")
args <- parser$parse_args()
n <- args$n
d <- args$d
U <- args$U
alpha <- args$alpha
ntrial<- args$ntrial
cftype <- args$cftype
seed <- args$seed
q<- c(0.5*alpha, 1- (0.5*alpha))
path = args$path
Xfun <- function(n, d){
matrix(runif(n * d), nrow = n, ncol = d)
}
taufun <- function(X){
2 / (1 + exp(-5 * (X[, 1] - 0.5))) * 2 / (1 + exp(-5 * (X[, 2] - 0.5)))
}
sdfun <- function(X){
rep(1, nrow(X))
}
pscorefun <- function(X){
(1 + pbeta(1-X[, 1], 2, 4)) / 4
}
errdist <- rnorm
get_Yobs <- function(X){
return(taufun(X) + sdfun(X) * errdist(dim(X)[1]))
}
datalist = list() #储存结果
idx <- 1
for (gmm_star in seq(1,4,0.5)){
print(gmm_star)
X <- Xfun(n,d)
Y <- get_Yobs(X)
ps <- pscorefun(X)
T <- as.numeric(runif(n)<ps)
Y[!T] <- NA # 只有接受了处理的观测值才有结果
# 训练基于均值、分位数和ite的模型
obj_mean <- conformal_SA(X, Y, gmm_star, type = "mean",quantiles=list(), outfun='RF')
obj_cqr <- conformal_SA(X, Y, gmm_star, type = "CQR", quantiles=q, outfun='quantRF')
obj_ite <- conformalCf(X, Y, type = 'mean', outfun ='RF', useCV = FALSE)
# 测试
ntest <- 1000
Xtest <- Xfun(ntest,d)
pstest <- pscorefun(Xtest)
Ttest <- as.numeric(runif(ntest)<pstest)
id1 <- which(Ttest==1)
id0 <- which(Ttest==0)
Ytest <- rep(NA,ntest)
Ytest[id1] <- taufun(Xtest[id1,]) + sdfun(Xtest[id1,]) * errdist(length(id1))
Ytest_cf <- matrix(0,length(id0),1)
Ytest_cf[,1] <- samplecf(Xtest[id0,],taufun, sdfun, case=cftype, gmm=gmm_star)
ITE <- Ytest
ITE[id0] <- c(Ytest_cf)
# 分别进行预测
objs <- list(obj_mean,obj_cqr,obj_ite)
groups <- c('Mean','CQR','ITE')
for (rs in 1:length(objs)){
if (groups[rs]=='ITE'){
ci <- predict(objs[[rs]], Xtest, alpha = alpha)
}else{
ci <- predict.conformalmsm(objs[[rs]], Xtest,alpha = alpha)
}
dat <- data.frame(lower = ci$lower, upper=ci$upper, ite = ITE,
T=Ttest, cover=as.numeric((ITE>=ci$lower)&(ITE<=ci$upper)),
X=Xtest)
dat$group <- groups[rs]
dat$gmm <- gmm_star
datalist[[idx]] <- dat
idx <- idx+1
}
}
# 创建新的文件路径
folder<- paste0(path, 'individual', "/")
print(folder)
dir.create(folder, recursive=TRUE)
# 写入新文件
all_data = do.call(rbind, datalist)
write.csv(all_data, paste0(folder,'alpha',10*alpha,'n',n,'.csv'), row.names = FALSE)
path
Xfun <- function(n, d){
matrix(runif(n * d), nrow = n, ncol = d)
}
? samplecf
??samplecf

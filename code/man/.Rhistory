library("cfcausal")
?nested_conformalSA
??nested_conformalSA
#########设置###########
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 1, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--path", type = "character", default = './data/', help = "save location")
args <- parser$parse_args()
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save <- args$save
path = args$path
q<- c(alpha/2, 1- (alpha/2))
nested_conformalSA
?nested_conformalSA
nested_conformalSA
environment()
baseenv()
parent.call <- function(env) {
print(env)
if(is.environment(env) & !identical(env, emptyenv())) {
parent.call(parent.env(env))
}
}
parent.call(env)
?cfcausal
??cfcausal

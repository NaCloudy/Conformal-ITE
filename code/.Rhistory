######vd######
# 读取data.xlsx文件的第一个工作表
vd <- read.csv("data/VD.csv")
# 数据预处理
A <- as.numeric(vd$Group == "A")
# 定义协变量矩阵
X <- vd[, c("Sex", "Age",
"Height", "BW", #"BMI",
"FIB4","APRI","VD0","AST0","ALT0","Plt0","TGF0",
"TIMP0","MMP0","P3NP0")]
X[X$Sex == 2,]$Sex <- 0
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- vd$TGF6
# # 调用boosting算法进行预测
colnames(X1) <- c("Sex","Age31.40","Age41.50","Age51.60","Age61.70","Age71.80","Height","BW","FIB4","APRI","VD0","AST0","ALT0","Plt0","TGF0","TIMP0","MMP0","P3NP0")
file_name <- "Vitamin D-10"
get_hist(X1, A, Y_all, file_name)
get_box(X1, A, Y_all, file_name)
######vk######
# 导入数据
# 读取data.xlsx文件的第一个工作表
vk <- read.csv("data/VK2.csv")
vk$Gender <- ifelse(vk$Gender  == "Male", 1, 0)
vk$Access <- ifelse(vk$Access  == "AVFistula", 1, 0)
# 使用ifelse函数，把"Yes"替换为1，把"No"替换为0
# 将需要变成0-1变量的列进行转换
# 生成模型矩阵并赋值给mm
mm <- model.matrix(~ HTN + DM + HCV + Smoking + Heartfailure + ISHD, data = vk)
# 把mm数据框中的虚拟编码替换到vk数据框中
# 创建一个向量col_names，存储mm数据框中除了截距项之外的列名
col_names <- colnames(mm)[-1]
# 使用for循环遍历col_names向量中的每个元素
for (col in col_names) {
# 使用赋值符号<-把mm数据框中对应列的值覆盖到vk数据框中对应列上
vk[, col] <- mm[, col]
}
# 筛选处理组和控制组
A <- as.numeric(vk$T == 1)
# 定义协变量矩阵
X <- vk[, c("Gender","HTNYes","DMYes" , "HCVYes","SmokingYes", "HeartfailureYes" ,"ISHDYes","Access","Age","Durationofdialysis", "PTH", "Ca.Pre","PHPre", "CaxPProductPre")]
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- vk$MGPPre
file_name <- "Vitamin K-10"
get_hist(X1, A, Y_all, file_name)
get_box(X1, A, Y_all, file_name)
options (warn = -1)
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
library("readxl")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 1, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--method", type = "character", default = 'mean', help = "mean or cqr")
parser$add_argument("--save_par", type = "character", default = './results/ITE/', help = "save parent location")
parser$add_argument("--data_name", type = "character", default = 'data1', help = "data name")
args <- parser$parse_args()
method <- args$method
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save_par <- args$save_par
data_name <- args$data_name
save_path <- paste0(save_par,data_name,"-",method,"/")
q<- c(alpha/2, 1- (alpha/2))
# 导入数据
# 读取this_data数据集
this_data <- read_xlsx(paste0("data/",data_name,".xlsx"))
# 筛选处理组和控制组
A <- as.numeric(this_data$group == "1")
# 定义协变量矩阵
X <- this_data[, c("Sex", "AgeGroup","Education", "Smoker", "Income", "Living",
"TNf0", "GPx10", "IL80", "SOD30")]
X[X$Sex == 2,]$Sex <- 0
X$AgeGroup = as.factor(X$AgeGroup)
X$Education = as.factor(X$Education)
X$Smoker = as.factor(X$Smoker)
X$Income = as.factor(X$Income)
X$Living = as.factor(X$Living)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- this_data$SOD32 #GPx12#IL82#SOD32#TNf2
record <- replicate(2,matrix(0,nrow=ntrial,ncol=3), simplify=FALSE)
# 创建文件路径
folder<- paste0(save_path,'alpha_',alpha,'_gmm_',gmm_star, '/')
dir.create(folder, recursive=TRUE, showWarnings = FALSE)
iter <- 1
n <- length(Y_all)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
print(paste0("alpha is ",alpha))
# 训练集数据的划分
Y_obs <- Y_all[trainid]
X <- X1[trainid,]
T_obs <- A[trainid]
Y1 <- Y_obs
Y1[which(T_obs==0)] <- NA
Y0 <- Y_obs
Y0[which(T_obs==1)] <- NA
id <- seq(1, n)
testid<- id[!(id %in% trainid)]
Xtest <- X1[testid,]
# 生成预测区间
colnames(X) <- c("Sex", "AgeGroup","Education", "Smoker", "Income", "Living",
"TNf0", "GPx10", "IL80", "SOD30")
colnames(Xtest) <- c("Sex", "AgeGroup","Education", "Smoker", "Income", "Living",
"TNf0", "GPx10", "IL80", "SOD30")
ncol(X)
colnames(X1)
# 导入数据
# 读取this_data数据集
this_data <- read_xlsx(paste0("data/",data_name,".xlsx"))
# 筛选处理组和控制组
A <- as.numeric(this_data$group == "1")
# 定义协变量矩阵
X <- this_data[, c("Sex", "AgeGroup","Education", "Smoker", "Income", "Living",
"TNf0", "GPx10", "IL80", "SOD30")]
X[X$Sex == 2,]$Sex <- 0
X$AgeGroup = as.factor(X$AgeGroup)
X$Education = as.factor(X$Education)
X$Smoker = as.factor(X$Smoker)
X$Income = as.factor(X$Income)
X$Living = as.factor(X$Living)
X$Education
# 导入数据
# 读取this_data数据集
this_data <- read_xlsx(paste0("data/",data_name,".xlsx"))
# 筛选处理组和控制组
A <- as.numeric(this_data$group == "1")
# 定义协变量矩阵
X <- this_data[, c("Sex", "AgeGroup","Education", "Smoker", "Income", "Living",
"TNf0", "GPx10", "IL80", "SOD30")]
X$Education
#########设置###########
options (warn = -1)
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
library("readxl")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 1, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--method", type = "character", default = 'mean', help = "mean or cqr")
parser$add_argument("--save_par", type = "character", default = './results/ITE/', help = "save parent location")
parser$add_argument("--data_name", type = "character", default = 'data1', help = "data name")
args <- parser$parse_args()
method <- args$method
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save_par <- args$save_par
data_name <- args$data_name
save_path <- paste0(save_par,data_name,"-",method,"/")
q<- c(alpha/2, 1- (alpha/2))
# 导入数据
# 读取this_data数据集
this_data <- read_xlsx(paste0("data/",data_name,".xlsx"))
# 筛选处理组和控制组
A <- as.numeric(this_data$group == "1")
# 定义协变量矩阵
X <- this_data[, c("Sex", "AgeGroup","Education", "Smoker", "Income", "Living",
"TNf0", "GPx10", "IL80", "SOD30")]
X[X$Sex == 2,]$Sex <- 0
X$AgeGroup = as.factor(X$AgeGroup)
X$Education = as.factor(X$Education)
X$Smoker = as.factor(X$Smoker)
X$Income = as.factor(X$Income)
X$Living = as.factor(X$Living)
X1 <- model.matrix(~ . - 1, X)
colnames(X1)
X$AgeGroup
#########设置###########
options (warn = -1)
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
library("readxl")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 1, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--method", type = "character", default = 'mean', help = "mean or cqr")
parser$add_argument("--save_par", type = "character", default = './results/ITE/', help = "save parent location")
parser$add_argument("--data_name", type = "character", default = 'data30', help = "data name")
args <- parser$parse_args()
method <- args$method
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save_par <- args$save_par
data_name <- args$data_name
save_path <- paste0(save_par,data_name,"-logUr","-",method,"/")
q<- c(alpha/2, 1- (alpha/2))
# 导入数据
# 读取this_data数据集
this_dat <- read_xlsx(paste0("data/",data_name,".xlsx"))
# 筛选处理组和控制组
A <- as.numeric(this_dat$Ngroup == "1")
# 定义协变量矩阵
X <- this_dat[, c("Male","Age","Height", "Weight","BMI")]
X[X$Male == 2,]$Male <- 0
X$Male <- as.factor(X$Male)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- log(this_dat$UricAcid) #HU
record <- replicate(2,matrix(0,nrow=ntrial,ncol=3), simplify=FALSE)
# 创建文件路径
folder<- paste0(save_path,'alpha_',alpha,'_gmm_',gmm_star, '/')
dir.create(folder, recursive=TRUE, showWarnings = FALSE)
##########训练测试##########
for (iter in 1:ntrial){
n<- length(Y_all)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
print(paste0("alpha is ",alpha))
# 训练集数据的划分
Y_obs <- Y_all[trainid]
X <- X1[trainid,]
T_obs <- A[trainid]
Y1 <- Y_obs
Y1[which(T_obs==0)] <- NA
Y0 <- Y_obs
Y0[which(T_obs==1)] <- NA
id <- seq(1, n)
testid<- id[!(id %in% trainid)]
Xtest <- X1[testid,]
# 生成预测区间
colnames(X) <- c("Male0", "Male1", "Age","Height", "Weight","BMI")
colnames(Xtest) <- c("Male0", "Male1", "Age","Height", "Weight","BMI")
if(method == "mean"){
obj_mean <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "mean",quantiles=list(), outfun='RF',psparams = list(bag.fraction = 0.8,n.minobsinnode = 5) )
obj_bands_mean <- predict.nested(obj_mean, X, Y_obs, T_obs, alpha = alpha)
ci_mean <- fit_and_predict_band(obj_bands_mean, Xtest, testid, 'RF')
ci_list <- list(ci_mean)
data <- cbind(ci_mean)
colnames(data) <- c("mean_low", "mean_high", "mean_y1_mean","mean_y0_mean", "id", "effectiveness")
print(paste0("#effective:",sum(ci_mean$effective)))
}else if (method == "cqr"){
obj_cqr <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "CQR",quantiles=q, outfun='quantRF',psparams = list(bag.fraction = 0.8,n.minobsinnode = 5))
obj_bands_cqr <- predict.nested(obj_cqr, X, Y_obs, T_obs, alpha = alpha)
ci_cqr <- fit_and_predict_band(obj_bands_cqr, Xtest, testid, 'RF')
ci_list <- list(ci_cqr)
data <- cbind(ci_cqr)
colnames(data) <- c("cqr_low", "cqr_high", "cqr_y1_mean","cqr_y0_mean", "id", "effectiveness")
print(paste0("#effective:",sum(ci_cqr$effective)))
}
df <- as.data.frame(t(data))
write.csv(data, file=paste0(folder, 'ntrial_', iter, '.csv'))
}
gc()
#########设置###########
options (warn = -1)
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
library("readxl")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 1, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--method", type = "character", default = 'mean', help = "mean or cqr")
parser$add_argument("--save_par", type = "character", default = './results/ITE/', help = "save parent location")
parser$add_argument("--data_name", type = "character", default = 'bweight', help = "data name")
args <- parser$parse_args()
method <- args$method
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save_par <- args$save_par
data_name <- args$data_name
save_path <- paste0(save_par,data_name, "-log","-",method,"/")
q<- c(alpha/2, 1- (alpha/2))
# 导入数据
# 读取this_data数据集
this_dat <- read.csv(paste0("data/",data_name,".csv"))
# 筛选处理组和控制组
A <- as.numeric(this_dat$MomSmoke == "1")
# 定义协变量矩阵
X <- this_dat[, c("Black","Married","Boy", "MomAge","MomWtGain", "Visit", "MomEdLevel")]
X$Black <- as.factor(X$Black)
X$Married <- as.factor(X$Married)
X$Boy <- as.factor(X$Boy)
X$Visit <- as.factor(X$Visit)
X$MomEdLevel <- as.factor(X$MomEdLevel)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- log(this_dat$Weight)
record <- replicate(2,matrix(0,nrow=ntrial,ncol=3), simplify=FALSE)
# 创建文件路径
folder<- paste0(save_path,'alpha_',alpha,'_gmm_',gmm_star, '/')
dir.create(folder, recursive=TRUE, showWarnings = FALSE)
##########训练测试##########
n<- length(Y_all)
trainprop <- 0.8
set.seed(123)
trainid <- sample(n, floor(n * trainprop))
set.seed(NULL)
print(paste0("alpha is ",alpha))
# 训练集数据的划分
Y_obs <- Y_all[trainid]
X <- X1[trainid,]
T_obs <- A[trainid]
Y1 <- Y_obs
Y1[which(T_obs==0)] <- NA
Y0 <- Y_obs
Y0[which(T_obs==1)] <- NA
id <- seq(1, n)
testid<- id[!(id %in% trainid)]
Xtest <- X1[testid,]
for (iter in 1:ntrial){
# 生成预测区间
colnames(X) <- c("Black0", "Black1", "Married1", "Boy1", "MomAge", "MomWtGain", "Visit1", "Visit2", "Visit3", "MomEdLevel1", "MomEdLevel2", "MomEdLevel3")
colnames(Xtest) <- c("Black0", "Black1", "Married1", "Boy1", "MomAge", "MomWtGain", "Visit1", "Visit2", "Visit3", "MomEdLevel1", "MomEdLevel2", "MomEdLevel3")
if(method == "mean"){
obj_mean <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "mean",quantiles=list(), outfun='RF',psparams = list(bag.fraction = 0.8,n.minobsinnode = 5) )
obj_bands_mean <- predict.nested(obj_mean, X, Y_obs, T_obs, alpha = alpha)
ci_mean <- fit_and_predict_band(obj_bands_mean, Xtest, testid, 'RF')
ci_list <- list(ci_mean)
data <- cbind(ci_mean)
colnames(data) <- c("mean_low", "mean_high", "mean_y1_mean","mean_y0_mean", "id", "effectiveness")
print(paste0("#effective:",sum(ci_mean$effective)))
}else if (method == "cqr"){
obj_cqr <- nested_conformalSA(X, Y1, Y0, T_obs, gmm_star, type = "CQR",quantiles=q, outfun='quantRF',psparams = list(bag.fraction = 0.8,n.minobsinnode = 5))
obj_bands_cqr <- predict.nested(obj_cqr, X, Y_obs, T_obs, alpha = alpha)
ci_cqr <- fit_and_predict_band(obj_bands_cqr, Xtest, testid, 'RF')
ci_list <- list(ci_cqr)
data <- cbind(ci_cqr)
colnames(data) <- c("cqr_low", "cqr_high", "cqr_y1_mean","cqr_y0_mean", "id", "effectiveness")
print(paste0("#effective:",sum(ci_cqr$effective)))
}
df <- as.data.frame(t(data))
write.csv(data, file=paste0(folder, 'ntrial_', iter, '.csv'))
}
gc()
#########设置###########
library("devtools")
if(exists("cfcausal:::summary_CI")){
rm(list = c("summary_CI"))
}
devtools::load_all(".")
library("cfcausal")
library("dplyr")
library("ggplot2")
library("bannerCommenter")
options(scipen=999)
#### Get parameters
suppressPackageStartupMessages(library("argparse"))
parser <- ArgumentParser()
parser$add_argument("--gmm_star", type = "double", default = 3, help = "SA parameter, >=1")
parser$add_argument("--alpha", type="double", default=0.2, help="miscoverage")
parser$add_argument("--save", type="logical", default=TRUE, help="save")
parser$add_argument("--seed", type = "double", default = 1, help = "random seed")
parser$add_argument("--ntrial", type = "integer", default = 5, help = "number of trials")
parser$add_argument("--path", type = "character", default = './results/fish/ITE/', help = "save location")
args <- parser$parse_args()
alpha <- args$alpha
gmm_star <- args$gmm_star
ntrial<- args$ntrial
seed <- args$seed
save <- args$save
path = args$path
q<- c(alpha/2, 1- (alpha/2))
#######数据处理#########
load('./exp-fish/data/fish.Rda')
fish
nhanes.fish
write.csv(nhanes.fish, file="../data/fish.csv")
write.csv(nhanes.fish, file="./data/fish.csv")
library("readxl")
# 导入自定义函数
source("plot_figures/or_plot/get_hist.R")
source("plot_figures/or_plot/get_box.R")
######vk######
# 导入数据
this_dat <- read.csv(paste0("./data/",data_name,".csv"))
library("readxl")
# 导入自定义函数
source("plot_figures/or_plot/get_hist.R")
source("plot_figures/or_plot/get_box.R")
paste0("./data/",data_name,".csv")
######vk######
# 导入数据
data_name <- "bweight"
this_dat <- read.csv(paste0("./data/",data_name,".csv"))
# 筛选处理组和控制组
A <- as.numeric(this_dat$MomSmoke == "1")
# 定义协变量矩阵
X <- this_dat[, c("Black","Married","Boy", "MomAge","MomWtGain", "Visit", "MomEdLevel")]
X$Black <- as.factor(X$Black)
X$Married <- as.factor(X$Married)
X$Boy <- as.factor(X$Boy)
X$Visit <- as.factor(X$Visit)
X$MomEdLevel <- as.factor(X$MomEdLevel)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- this_dat$Weight
file_name <- "bweight"
get_hist(X1, A, Y_all, file_name)
gc()
gc()
reticulate::repl_python()
gc()
library("readxl")
# 导入自定义函数
source("plot_figures/or_plot/get_hist.R")
source("plot_figures/or_plot/get_box.R")
library("readxl")
# 导入自定义函数
source("plot_figures/or_plot/get_hist.R")
#source("plot_figures/or_plot/get_box.R")
######vk######
# 导入数据
data_name <- "bweight"
this_dat <- read.csv(paste0("./data/",data_name,".csv"))
# 筛选处理组和控制组
A <- as.numeric(this_dat$MomSmoke == "1")
# 定义协变量矩阵
X <- this_dat[, c("Black","Married","Boy", "MomAge","MomWtGain", "Visit", "MomEdLevel")]
X$Black <- as.factor(X$Black)
X$Married <- as.factor(X$Married)
X$Boy <- as.factor(X$Boy)
X$Visit <- as.factor(X$Visit)
X$MomEdLevel <- as.factor(X$MomEdLevel)
X1 <- model.matrix(~ . - 1, X)
# 定义响应变量
Y_all <- this_dat$Weight
file_name <- data_name
get_hist(X1, A, Y_all, file_name)
OR <- get_hist(X1, A, Y_all, file_name)
hist(OR, breaks = seq(1, 8, 0.5), prob=TRUE, xlab='(Adjusted) odds ratio',main=main,
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(OR, breaks = seq(1, 8, 0.5), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
max(OR)
hist(OR, breaks = seq(1, 4, 0.5), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(OR, breaks = seq(1, 4.5, 0.5), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(OR, breaks = seq(1, 4.001, 0.5), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(OR, breaks = seq(1, 4.01, 0.5), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(OR, breaks = seq(1, 4.01, 0.1), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(OR, breaks = seq(1, 4.1, 0.1), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(OR, breaks = seq(1, 4.1, 0.2), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(OR, breaks = seq(1, 4.2, 0.2), prob=TRUE, xlab='(Adjusted) odds ratio',
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
mean(OR)
median(OR)
quantile(OR)
boxplot(OR)
summary(OR)
quantile(OR)
